// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id                   String    @id @default(cuid())
  email                String    @unique
  emailVerified        DateTime? @map("email_verified")
  image                String?
  name                 String
  passwordHash         String?   @map("password_hash")
  role                 Role      @default(HOMEOWNER)
  verified             Boolean   @default(false)
  failedLoginAttempts  Int       @default(0) @map("failed_login_attempts")
  lockedUntil          DateTime? @map("locked_until")
  lastLogin            DateTime? @map("last_login")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  // Relations
  properties           Property[]
  energyAssessments    EnergyAssessment[]
  subsidyApplications  SubsidyApplication[]
  contractorBookings   ContractorBooking[]
  verificationTokens   VerificationToken[]
  auditLogs            AuditLog[]
  accounts             Account[]
  sessions             Session[]

  @@map("profiles")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user Profile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Property {
  id               String      @id @default(cuid())
  userId           String      @map("user_id")
  address          String
  postalCode       String      @map("postal_code")
  city             String
  province         String
  propertyType     PropertyType @map("property_type")
  constructionYear Int         @map("construction_year")
  squareMeters     Decimal     @map("square_meters")
  currentEnergyLabel String    @map("current_energy_label")
  targetEnergyLabel String?    @map("target_energy_label")
  heatingType      String      @map("heating_type")
  insulationLevel  String      @map("insulation_level")
  hasRenewableEnergy Boolean   @default(false) @map("has_renewable_energy")
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @updatedAt @map("updated_at")

  // Relations
  user             Profile     @relation(fields: [userId], references: [id])
  energyAssessments EnergyAssessment[]
  subsidyApplications SubsidyApplication[]
  contractorBookings ContractorBooking[]
  energyProjects   EnergyProject[]

  @@map("properties")
}

model EnergyAssessment {
  id                    String   @id @default(cuid())
  userId                String   @map("user_id")
  propertyId            String   @map("property_id")
  currentEnergyLabel    String   @map("current_energy_label")
  targetEnergyLabel     String   @map("target_energy_label")
  currentEnergyUsage    Decimal  @map("current_energy_usage")
  potentialSavings      Decimal  @map("potential_savings")
  estimatedCost         Decimal  @map("estimated_cost")
  paybackPeriod         Int      @map("payback_period")
  co2Reduction          Decimal  @map("co2_reduction")
  recommendations       Json     @map("recommendations")
  complianceDeadline    DateTime @map("compliance_deadline")
  assessmentDate        DateTime @default(now()) @map("assessment_date")
  createdAt             DateTime @default(now()) @map("created_at")

  // Relations
  user                  Profile  @relation(fields: [userId], references: [id])
  property              Property @relation(fields: [propertyId], references: [id])

  @@map("energy_assessments")
}

model SubsidyScheme {
  id                String   @id @default(cuid())
  name              String
  description       String
  provider          String   // RVO, Municipality, etc.
  maxAmount         Decimal  @map("max_amount")
  eligibilityCriteria Json   @map("eligibility_criteria")
  applicableEnergyMeasures String[] @map("applicable_energy_measures")
  validFrom         DateTime @map("valid_from")
  validUntil        DateTime @map("valid_until")
  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  applications      SubsidyApplication[]

  @@map("subsidy_schemes")
}

model SubsidyApplication {
  id                String            @id @default(cuid())
  userId            String            @map("user_id")
  propertyId        String            @map("property_id")
  subsidySchemeId   String            @map("subsidy_scheme_id")
  status            SubsidyStatus     @default(DRAFT)
  amountRequested   Decimal           @map("amount_requested")
  amountApproved    Decimal?          @map("amount_approved")
  amountPaid        Decimal?          @map("amount_paid")
  applicationData   Json              @map("application_data")
  rvoReference      String?           @map("rvo_reference")
  submittedAt       DateTime?         @map("submitted_at")
  approvedAt        DateTime?         @map("approved_at")
  paidAt            DateTime?         @map("paid_at")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")

  // Relations
  user              Profile           @relation(fields: [userId], references: [id])
  property          Property          @relation(fields: [propertyId], references: [id])
  subsidyScheme     SubsidyScheme     @relation(fields: [subsidySchemeId], references: [id])

  @@map("subsidy_applications")
}

model Contractor {
  id                String   @id @default(cuid())
  companyName       String   @map("company_name")
  contactName       String   @map("contact_name")
  email             String   @unique
  phone             String
  address           String
  city              String
  province          String
  postalCode        String   @map("postal_code")
  specialties       String[] // heat_pumps, insulation, solar_panels, etc.
  certifications    Json     // RVO certifications, etc.
  rating            Decimal  @default(0)
  reviewCount       Int      @default(0) @map("review_count")
  isVerified        Boolean  @default(false) @map("is_verified")
  isActive          Boolean  @default(true) @map("is_active")
  serviceRadius     Int      @map("service_radius") // km
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  bookings          ContractorBooking[]
  reviews           ContractorReview[]

  @@map("contractors")
}

model ContractorBooking {
  id                String         @id @default(cuid())
  userId            String         @map("user_id")
  propertyId        String         @map("property_id")
  contractorId      String         @map("contractor_id")
  serviceType       String         @map("service_type")
  description       String
  status            BookingStatus  @default(REQUESTED)
  quotedAmount      Decimal?       @map("quoted_amount")
  finalAmount       Decimal?       @map("final_amount")
  scheduledDate     DateTime?      @map("scheduled_date")
  completedDate     DateTime?      @map("completed_date")
  notes             String?
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")

  // Relations
  user              Profile        @relation(fields: [userId], references: [id])
  property          Property       @relation(fields: [propertyId], references: [id])
  contractor        Contractor     @relation(fields: [contractorId], references: [id])
  review            ContractorReview?

  @@map("contractor_bookings")
}

model ContractorReview {
  id                String            @id @default(cuid())
  bookingId         String            @unique @map("booking_id")
  contractorId      String            @map("contractor_id")
  rating            Int
  title             String?
  comment           String?
  wouldRecommend    Boolean           @map("would_recommend")
  createdAt         DateTime          @default(now()) @map("created_at")

  // Relations
  booking           ContractorBooking @relation(fields: [bookingId], references: [id])
  contractor        Contractor        @relation(fields: [contractorId], references: [id])

  @@map("contractor_reviews")
}

model EnergyProject {
  id                String        @id @default(cuid())
  propertyId        String        @map("property_id")
  name              String
  description       String
  energyMeasures    String[]      @map("energy_measures")
  status            ProjectStatus @default(PLANNING)
  startDate         DateTime?     @map("start_date")
  completionDate    DateTime?     @map("completion_date")
  totalCost         Decimal       @map("total_cost")
  subsidyAmount     Decimal       @map("subsidy_amount")
  energySavings     Decimal       @map("energy_savings") // percentage
  co2Reduction      Decimal       @map("co2_reduction")
  beforeEnergyLabel String        @map("before_energy_label")
  afterEnergyLabel  String?       @map("after_energy_label")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")

  // Relations
  property          Property      @relation(fields: [propertyId], references: [id])

  @@map("energy_projects")
}

model VerificationToken {
  id        String            @id @default(cuid())
  userId    String            @map("user_id")
  token     String            @unique
  type      VerificationType
  expiresAt DateTime          @map("expires_at")
  createdAt DateTime          @default(now()) @map("created_at")

  // Relations
  user      Profile           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_tokens")
}

model AuditLog {
  id           String    @id @default(cuid())
  userId       String?   @map("user_id")
  action       String
  resourceType String    @map("resource_type")
  resourceId   String?   @map("resource_id")
  oldValues    Json?     @map("old_values")
  newValues    Json?     @map("new_values")
  ipAddress    String?   @map("ip_address")
  userAgent    String?   @map("user_agent")
  createdAt    DateTime  @default(now()) @map("created_at")

  // Relations
  user         Profile?  @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// Enums
enum Role {
  HOMEOWNER
  CONTRACTOR
  ADMIN

  @@map("role")
}

enum PropertyType {
  HOUSE
  APARTMENT
  TOWNHOUSE

  @@map("property_type")
}

enum SubsidyStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  PAID

  @@map("subsidy_status")
}

enum BookingStatus {
  REQUESTED
  QUOTED
  ACCEPTED
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED

  @@map("booking_status")
}

enum ProjectStatus {
  PLANNING
  APPROVED
  IN_PROGRESS
  COMPLETED
  CANCELLED

  @@map("project_status")
}

enum VerificationType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  PHONE_VERIFICATION

  @@map("verification_type")
}